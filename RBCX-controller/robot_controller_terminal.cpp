#include <iostream>
#include <string>
#include <cstring>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>

int main() {
    // Vytvo≈ôen√≠ UDP socketu
    int sock = socket(AF_INET, SOCK_DGRAM, 0);
    if (sock < 0) {
        std::cerr << "Chyba vytv√°≈ôen√≠ socketu!" << std::endl;
        return 1;
    }

    // Nastaven√≠ adresy robota
    struct sockaddr_in robotAddr;
    memset(&robotAddr, 0, sizeof(robotAddr));
    robotAddr.sin_family = AF_INET;
    robotAddr.sin_port = htons(1234);  // Port mus√≠ sedƒõt s robotem
    
    // üëá SEM DOSAƒé IP ADRESU ROBOTA
    if (inet_pton(AF_INET, "192.168.4.1", &robotAddr.sin_addr) <= 0) {
        std::cerr << "Neplatn√° IP adresa!" << std::endl;
        close(sock);
        return 1;
    }

std::cout << "ü§ñ POKROƒåIL√ù OVLADAƒå ROBOTA" << std::endl;
std::cout << "==============================" << std::endl;
std::cout << "Dostupn√© p≈ô√≠kazy:" << std::endl;
std::cout << "üéØ POHYB:" << std::endl;
std::cout << "  forward(d√©lka, rychlost)     - nap≈ô: forward(2000,50)" << std::endl;
std::cout << "  backward(d√©lka, rychlost)    - nap≈ô: backward(1000,30)" << std::endl;
std::cout << "  turn_left(√∫hel, rychlost)    - nap≈ô: turn_left(90,40)" << std::endl;
std::cout << "  turn_right(√∫hel, rychlost)   - nap≈ô: turn_right(90,40)" << std::endl;
std::cout << "  radius_left(r,√∫hel,rychlost) - zat√°ƒçka vlevo s polomƒõrem" << std::endl;
std::cout << "  radius_right(r,√∫hel,rychlost)- zat√°ƒçka vpravo s polomƒõrem" << std::endl;
std::cout << "  forward_acc(d√©lka, rychlost) - vp≈ôed s akcelerac√≠" << std::endl;
std::cout << "  backward_acc(d√©lka, rychlost)- vzad s akcelerac√≠" << std::endl;
std::cout << "  back_buttons(rychlost)       - couv√°n√≠ na tlaƒç√≠tka" << std::endl;
std::cout << "  power(lev√Ω, prav√Ω)           - p≈ô√≠m√Ω v√Ωkon motor≈Ø -100..100" << std::endl;
std::cout << "  speed(lev√Ω, prav√Ω)           - nastaven√≠ rychlosti -100..100" << std::endl;
std::cout << "  drive(lmm,rmm,lrychl,prychl) - p≈ôesn√© ≈ô√≠zen√≠ pojezdu" << std::endl;
std::cout << std::endl;
std::cout << "üîß SERVA:" << std::endl;
std::cout << "  servo(id,√∫hel)               - hloup√© servo -90..90¬∞" << std::endl;
std::cout << "  servo_off(id)                - vypnut√≠ serva" << std::endl;
std::cout << "  smart_servo(id,pozice)       - chytr√© servo 0..1000" << std::endl;
std::cout << std::endl;
std::cout << "üí° LED:" << std::endl;
std::cout << "  led(id,stav)                 - LED podle ID 1-4" << std::endl;
std::cout << "  led_red(1/0)                 - ƒçerven√° LED" << std::endl;
std::cout << "  led_yellow(1/0)              - ≈ælut√° LED" << std::endl;
std::cout << "  led_green(1/0)               - zelen√° LED" << std::endl;
std::cout << "  led_blue(1/0)                - modr√° LED" << std::endl;
std::cout << "  led_all(1/0)                 - v≈°echny LED" << std::endl;
std::cout << std::endl;
std::cout << "üìä SENZORY:" << std::endl;
std::cout << "  ultra(id)                    - ultrazvuk 1-4" << std::endl;
std::cout << "  color(n√°zev)                 - barevn√Ω senzor (RGB)" << std::endl;
std::cout << "  laser(n√°zev)                 - laserov√Ω d√°lkomƒõr" << std::endl;
std::cout << "  ir_left()                    - IR senzor vlevo" << std::endl;
std::cout << "  ir_right()                   - IR senzor vpravo" << std::endl;
std::cout << "  battery()                    - stav baterie a teplota" << std::endl;
std::cout << std::endl;
std::cout << "üîä BZUƒå√ÅK:" << std::endl;
std::cout << "  buzzer(1/0)                  - zap/vyp bzuƒç√°k" << std::endl;
std::cout << std::endl;
std::cout << "üîÑ OSTATN√ç:" << std::endl;
std::cout << "  on()                         - zapne motory" << std::endl;
std::cout << "  off()                        - vypne motory" << std::endl;
std::cout << "  stop                         - okam≈æit√© zastaven√≠" << std::endl;
std::cout << "  help()                       - tento help" << std::endl;
std::cout << "  exit                         - ukonƒç√≠ program" << std::endl;
std::cout << "==============================" << std::endl;

    std::string command;
    while (true) {
        std::cout << ">> ";
        std::getline(std::cin, command);

        if (command == "exit") {
            break;
        }

        // Odesl√°n√≠ p≈ô√≠kazu robotovi
        int result = sendto(sock, command.c_str(), command.length() + 1, 0,
                           (struct sockaddr*)&robotAddr, sizeof(robotAddr));
        
        if (result < 0) {
            std::cerr << "Chyba odes√≠l√°n√≠!" << std::endl;
        } else {
            std::cout << "üì§ Odesl√°no: " << command << std::endl;
        }
    }

    // √öklid
    close(sock);
    std::cout << "Program ukonƒçen." << std::endl;
    
    return 0;
}
//g++ -o robot_controller_terminal robot_controller_terminal.cpp
//./robot_controller_terminal